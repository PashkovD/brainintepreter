int ip = 0;
int work = 1;
string Reg ="\0\0\0\0\0\0\0\0";
int var1 = 0;
int var2 = 0;

int read = 0;
int read_adr;
int read_data;

int write = 0;
int write_adr;
int write_data;


int save_inst = 0;
int proc_inst = 0;
int decode_inst = 0;
int inst;

int save_imm = 0;
int read_imm = 0;
int imm;


string data = "`data";

while(work){
    if (read){
        read = 0;
        if (read_adr){
            data[0] = read_adr;
            data[1] = 0;
            goto data[0];
            asm("[-[->>>+<<<]>>>>[-]+<]");
            asm(">[-]>[-<+<+>>]<[->+<]+");
            asm("[<[-<<<+>>>]<<]");
            asm("<");
            goto data[0];
            read_data = data[0];
        } else {
            read_data = data[2];
        }
    }
    if (write){
        write = 0;
        if (write_adr){
            data[3] = write_adr;
            data[3] -= 1;
            data[4] = write_data;
            data[1] = 0;
            goto data[3];
            while(data[3]){
                data[3]-=1;
                data[6]=0;
                data[7]=0;
                while(data[3]){
                    data[3]-=1;
                    data[6]+=1;
                }
                while(data[4]){
                    data[4]-=1;
                    data[7]+=1;
                }
                data[4]=1;

                asm(">>>");
            }
            data[5]=0;
            while(data[4]){
                data[4]-=1;
                data[5]+=1;
            }
            data[4]+=1;
            goto data[4];
            asm("[<<<]>>>");
        } else {
            write_data = data[2];
        }
    }

    if (save_inst){
        save_inst = 0;
        inst = read_data;
        ip += 1;
    }elif (save_imm){
        save_imm = 0;
        imm = read_data;
        ip += 1;
    }

    if(read_imm){
        read_imm = 0;
        read = 1;
        save_imm = 1;
        read_adr = ip;
    }elif(proc_inst){
        proc_inst = 0;
        case(inst){
            `out:{
                imm %= 8;
                case(imm){
                    0:{out Reg[0];}
                    1:{out Reg[1];}
                    2:{out Reg[2];}
                    3:{out Reg[3];}
                    4:{out Reg[4];}
                    5:{out Reg[5];}
                    6:{out Reg[6];}
                    7:{out Reg[7];}
                }
            }
            `jmp:{
                ip = imm;
            }
            `in:{
                imm %= 8;
                case(imm){
                    0:{in Reg[0];}
                    1:{in Reg[1];}
                    2:{in Reg[2];}
                    3:{in Reg[3];}
                    4:{in Reg[4];}
                    5:{in Reg[5];}
                    6:{in Reg[6];}
                    7:{in Reg[7];}
                }
            }
        }
    }elif(decode_inst){
        decode_inst = 0;
        proc_inst = 1;
        case(inst){
            `out:{
                read_imm = 1;
            }
            `stop:{
                work = 0;
            }
            `jmp:{
                read_imm = 1;
            }
            `in:{
                read_imm = 1;
            }
        }
    }else{
        save_inst = 1;
        decode_inst = 1;
        read = 1;
        read_adr = ip;
    }
}